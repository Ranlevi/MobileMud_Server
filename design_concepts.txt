Game Design:
============

Game Philosophy:
----------------
- encourage role playing
- There is a process of discovery happening for players on the planet. We need millions
  of rooms, so probably a random romm generator with diferent bioms, like
  minecraft.
- Quests will lead to the discovery of the story's apex. We ask the
  players to keep it a secret from others. It won't work but will create
  better cohesion with the players who take the game seriously. 
- Going deeper into the planet makes it more dangeours, thus creating 
  a natural leveling/zoning system.
- Users will have no classes/gender: only self description and items owned.
- Curiosity will be awarded with new recipies for creating unique and helpful
  items.
- We want to engage the user's imagination, to make them 'see' the world in their
  mind's eye. So we ned to create strong signals for linking the text to 'mental
  pictures'. 
    - Backgroud color of the chat interface.
    - Messages boxes: different colors, border thickness and color,
      shapes, whitespace.
    - Typography for the text.
  This will not be random, but will have some intenral logic.



Economics:
--------------

- The economy is based on raw materials mined/found in the deeper levels.
- the basic 'source' of new value are the materials. It has a natural
    feedback loop: more players = more mining = more value.
- This casues inflation, so we need a sink to remove value from the game to
    prevent the coin being less and less valuable. 
- Two sinks: one is player growth, which creates demand for coin and thus
    fights inflation. The other is items being 
    broken/vanishing, which removes value from the game.
- We can create a link between the number of new players in the game
    to the rate of new mateial discovery, rate of decay of items.


- Coins:
  Digital economy. The coins are kept in a balance.
  Maybe a 'transfer X #' command. 
  User do tasks and get payed to the balance.

 Shops:
  User says 'buy'. shopkeeper gives a messgage chain with numbered list. say 'buy 1' buys.
  same for 'sell' -> 'sell 1'.


Software Architecture:
==================
- Thin client: 
    - display messages from server and send messages from users. 
    - All game logic is in the server.
    - Client allows CSS customization for visuals. 

- Composition is key. Keep mechanics simple, and build with them.

- Game content creation should be flexable, to allow any to create new games 
  using existing types.
  - defined by loading a JSON when the engine boots. 
  
- Two basic modes: 
  - Adventure: users interact with the world, create stuff according
    to what's available.
  - Creative: users interactivly create the world.
    - creating rooms and npcs. modifying properties via 'modify room.name' etc.
    - set/release ownership of rooms and objects.
  The two can be in the same game, but in different zones. 

- Classes and Entities:
    - Everything in the world is an Entity.
    - Entity can be of several types: e.g. Room, NPC, User, Item.
    - NPC and Item can have sub-types, with more specific parameters.
    - Every entity is as encapsulated as possible: everything effecting it should 
      be handled by the class itself.
    - Every Entity has a 16-digit ID, (String)
    - All entities are stored in a World Map() object, as id:instance pairs.


 // https://kentcdodds.com/blog/implementing-a-simple-state-machine-library-in-javascript

  Game story
  -----------
  User wakes up from deep sleep. Has almost no memory.
  Meets Larry Clarke, the akward genius who runs the ship.
  He tells him about planet nine (vaugely), tells him to take stuff and sends the user to the town, to the mayor. Tells him
  they need every pair of hands. Tells if the user sees a mechanical spider, don't be afraid.
  The spider will be in a room with basic equipement.